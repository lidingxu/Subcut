/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                           */
/*                  This file is part of the program and library             */
/*         SCIP --- Solving Constraint Integer Programs                      */
/*                                                                           */
/*    Copyright (C) 2002-2020 Konrad-Zuse-Zentrum                            */
/*                            fuer Informationstechnik Berlin                */
/*                                                                           */
/*  SCIP is distributed under the terms of the ZIB Academic License.         */
/*                                                                           */
/*  You should have received a copy of the ZIB Academic License              */
/*  along with SCIP; see the file COPYING. If not visit scipopt.org.         */
/*                                                                           */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


/**@file   sepa_intersub.h
 * @brief  submodular mamization separator with intersection cuts
 * @author Liding Xu
 */

/*---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8----+----9----+----0----+----1----+----2*/

#ifndef __SCIP_SEPA_INTERSUB_H__
#define __SCIP_SEPA_INTERSUB_H__


#include "objscip/objscip.h"
#include "probdata.h"
#include <unordered_map>
using namespace scip;
using namespace std;

struct SCIP_SepaData_Sub {
   vector<SCIP_Real> vray;
   vector<SCIP_Real> vsol;
	SCIP_Real gamma;
	SCIP_Bool branch_opt = TRUE;

   int                   ncutsgenerated = 0;     /**< total number of cuts that where generated by separateIntersection */
   int                   ncutsadded = 0;         /**< total number of cuts that where generated by separateIntersection and actually added */
   SCIP_Longint          lastnodenumber = -1;     /**< number of last node for which cuts were (allowed to be) generated */
   int                   lastncuts = 0;          /**< number of cuts already generated */


   int                   ncutslimit;         /**< limit for number of cuts generated consecutively */
   int                   ncutslimitroot;     /**< limit for number of cuts generated at root node */
   SCIP_Real             mincutviolation;    /**< minimal cut violation the generated cuts must fulfill to be added to the LP */
   SCIP_Real             minviolation;       /**< minimal violation the constraint must fulfill such that a cut can be generated */
   int                   atwhichnodes;       /**< determines at which nodes cut is used (if it's -1, it's used only at the root node,
                                                  if it's n >= 0, it's used at every multiple of n) */
   SCIP_Bool             ignorebadrayrestriction; /**< should cut be generated even with bad numerics when restricting to ray? */
   SCIP_Bool             ignorehighre;       /**< should cut be added even when range / efficacy is large? */
};


/** C++ constraint handler for  constraints */
class SepaInterSub : public ObjSepa
{
public:
	/** default constructor */
	SepaInterSub(
		SCIP* scip /**< SCIP data structure */
	)
		: ObjSepa(scip, /**< SCIP data structure */
			"intersub", /**< 	name of cut separator  */
			"stores the submodular constraints", /**< desc	description of cut separator */
			100000,	/**< priority	priority of the cut separator */
   		1,	/** freq	frequency for calling separator  */
			1.0,	/**< maxbounddist	maximal relative distance from current node's dual bound to primal bound compared to best node's dual bound for applying separation */
			FALSE,	/**< usessubscip	does the separator use a secondary SCIP instance? */
			TRUE	/**< delay	should separator be delayed, if other separators found cuts? */)
	{
	}

	SCIP_SepaData_Sub sepadata;


	virtual SCIP_DECL_SEPAEXECLP(scip_execlp);

	virtual SCIP_DECL_SEPAEXITSOL(scip_exitsol);

	virtual SCIP_DECL_SEPAINITSOL(scip_initsol);

	virtual SCIP_DECL_SEPAINIT(scip_init);

	virtual SCIP_DECL_SEPAEXIT(scip_exit);

	virtual SCIP_DECL_SEPACOPY(scip_copy);

	virtual SCIP_DECL_SEPAFREE(scip_free);



}; /*lint !e1712*/



#endif
